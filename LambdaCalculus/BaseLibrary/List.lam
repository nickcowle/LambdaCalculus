empty e c = e

cons h t e c = c h t

isEmpty l t f = l t (λ h t . f)

replicate n v = n (List.cons v) List.empty

repeat v = List.cons v (List.repeat v)

singleton v = List.cons v List.empty

fold f state xs = xs state (λ s xs . f (List.fold f state xs) s)

length = List.fold (λ n x . Nat.succ n) Nat.zero

append xs ys = xs ys (λ x xs . List.cons x (List.append xs ys))

collect f xs = List.fold (λ ys x . List.append (f x) ys) List.empty xs

bind xs f = List.collect f xs

return = List.singleton

apply = Combinators.bindToApply List.bind List.return

map = Combinators.applyToMap List.apply List.return

head xs = xs Option.none (λ x xs . Option.some x)

sum = List.fold Nat.add Nat.zero

product = List.fold Nat.mult (Nat.succ Nat.zero)

take n xs = (Nat.isZero n) List.empty (xs List.empty (λ x xs . List.cons x (List.take (Nat.pred n) xs)))

skip n xs = n (λ xs . xs List.empty (λ x xs . xs)) xs

nats = Combinators.Y (λ natsFrom n . List.cons n (natsFrom (Nat.succ n))) Nat.zero